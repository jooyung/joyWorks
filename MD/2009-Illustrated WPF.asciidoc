[[_0_]]
= Illustrated WPF
Joy <arbago@gmail.com>
:toc: macro
:experimantal:

toc::[]

[preface]
== 책

Illustrated WPF by Daniel Solis, 2012

[preface]
== Preface

[[_1_0_0_]]
== 1. Introduction to Windows Presentation Foundation

[[_1_1_1_]]
=== What Is Windows Presentation Foundation?

[[_1_2_2_]]
=== The Path to the Screen

[[_1_2_3_]]
==== Games and DirectX

[W] Since the significant effort required to use Direct3D generally outweighs its benefits in most consumer and business programming situations, the graphics power of video cards has remained largely `untapped`.

[[_1_2_4_]]
==== Windows Forms

[W] locked in::
exhibiting total concentration on the task in hand

`Locked-in` implementation: Since the functionality and presentation of the UI elements is built into the operating system, there is little you can do to customize them, other than to build custom controls with the look and behavior you want. This severely limits the amount of original style you can include without investing in a fair amount of work

[[_1_2_5_]]
==== Rendering Under WPF

[[_1_3_6_]]
=== Documents and Fonts

[[_1_4_7_]]
=== Graphics and Animation

[W] Animation refers to changing the display `in small ways` very quickly over time so that an object appears to move or change.

[[_1_5_8_]]
=== Styles and Control Templates

[T] A *style* is a named set of property settings, much like Cascading Style Sheets styles in HTML or like paragraph styles in Microsoft Word.

[[_1_6_9_]]
=== Separating Visual Design from Coding

[[_1_7_10_]]
=== WPF Prefers Vector Graphics

[[_1_7_11_]]
==== Bitmap Images

[[_1_7_12_]]
==== Bitmap Images and Screen Size

[[_1_7_13_]]
==== Vector Graphics

[[_1_8_14_]]
=== System DPI Independence and WPF Units

[T] dip::
Device Independent Pixels

[[_1_9_15_]]
=== XAML Browser Applications (XBAPs)

[[_1_10_16_]]
=== The Other Parts of .NET

[[_1_11_17_]]
=== Silverlight

[[_1_12_18_]]
=== Summary

[[_2_0_19_]]
== 2. Overview of WPF Programming

[[_2_1_20_]]
=== What Is an API?

[[_2_2_21_]]
=== A Simple WPF Program

[[_2_2_22_]]
==== Creating the Simple Program

[W] Use `whichever approach suits you best`, according to your experience and inclination.

[T] STAThread attribute::
Single-Threaded Apartment model of threading

[[_2_2_23_]]
==== Just the Facts

[[_2_2_24_]]
==== Step-by-Step

[[_2_3_25_]]
=== The Compilation Process

[[_2_4_26_]]
=== The Application and Window Classes

[[_2_5_27_]]
=== The Window Class

[[_2_5_28_]]
==== The Components of a Visual Window

This area is also called the _window chrome_.

[[_2_5_29_]]
==== Creating a Window

[[_2_6_30_]]
=== Important Properties of a Window

The appearance of these items is controlled by five properties: _Title_, _Content_, _Foreground_, _Background_, and _WindowStyle_.

The _g_ in the extension stands for _generated_.

Unless you look carefully, you might miss the _Connect_ method in Windows1.g.cs. It's an explicit interface implementation, and its fully qualified name is _System.Windows.Markup.IComponentConnector.Connect_.

[[_2_6_31_]]
==== WindowStyle

[[_2_6_32_]]
==== Content

[[_2_7_33_]]
=== Summary

[[_3_0_34_]]
== 3. WPF Architecture and Applications

[[_3_1_35_]]
=== Using Visual Studio to Create a WPF Program

[[_3_1_36_]]
==== Step-by-Step

[[_3_1_37_]]
==== Source Code Generated by the Template

[[_3_2_38_]]
=== What Is XAML?

[[_3_2_39_]]
==== Logical Trees and Visual Trees

[[_3_3_40_]]
=== The Compilation Process

[T] BAML::
Binary Application Markup Language

[[_3_3_41_]]
==== How the Files Are Used

[[_3_4_42_]]
=== The WPF Architecture

[T] MIL::
Media Integration Layer

[W] The Medial Integration Layer is unmanaged code and maps the WPF constructs to DirctX. DirectX, in turn, maps them to the graphics card. This module is unmanaged code so that it can be `as efficient as possible`.

[[_3_5_43_]]
=== More About the Window Class

A *brush* is a `graphic` that can be used to paint an area.

Each _brush type_ paints with a different type of `graphic`.

[[_3_5_44_]]
==== SolidColorBrushes

Notice that the objects returned by the properties are of type _SolidColorBrush_ - not of type Color.

[[_3_5_45_]]
==== Creating Colors

[W] When you combine them `in various proportions`, they produce different resulting colors.

[[_3_5_46_]]
==== Gradient Brushes

[[_3_5_47_]]
==== Linear Gradient Brushes

[[_3_5_48_]]
==== RadialGradientBrushes

[[_3_6_49_]]
=== The Application Class

[[_3_7_50_]]
=== Handling Application Events

During an application's lifetime, it goes through various stages, such as _startup_, _activation_, _deactivation_, and _shutdown_.

[[_3_7_51_]]
==== Application Lifetime Events

[[_3_8_52_]]
=== UI Elements Contain Content

[[_3_9_53_]]
=== The Class Inheritance Hierarchy

[[_3_10_54_]]
=== Summary

[[_4_0_55_]]
== 4. XAML

[[_4_1_56_]]
=== A Tree of Objects

[[_4_1_57_]]
==== Using XamlPad

[[_4_2_58_]]
=== Creating the UI Structure

[[_4_3_59_]]
=== XAML Trees

[[_4_4_60_]]
=== Object Element Syntax

[[_4_4_61_]]
==== The Syntax of Elements

[[_4_5_62_]]
=== Attribute Syntax

[[_4_5_63_]]
==== Empty Elements

[[_4_6_64_]]
=== More About Object Element Syntax

[[_4_6_65_]]
==== The Default Content Property

[[_4_7_66_]]
=== Type Converters for Attributes

[[_4_8_67_]]
=== Property Element Syntax

[[_4_9_68_]]
=== Attached Property Syntax

[[_4_9_69_]]
==== Reviewing the XAML Syntax Forms

[[_4_9_70_]]
==== Top-Level Elements

[[_4_10_71_]]
=== Code-Behind and Object Names

[[_4_11_72_]]
=== Namespaces

[[_4_11_73_]]
==== The Syntax of Namespaces

[[_4_11_74_]]
==== Using Classes from Other Namespaces

[[_4_11_75_]]
==== Example Using Namespaces

[[_4_12_76_]]
=== Markup Extensions

[W] `As useful as XAML is`, there are certain things it can't do on its own.

- A markup extension is a *hook* to a _class_ outside the XAML.
- A class designed to be used by a markup extension is called an _extension class_.

[[_4_12_77_]]
==== Example Creating a Markup Extension

[W] Creating one will also remove the mystery `that so often surrounds them`.

[[_4_13_78_]]
=== White Space

*white space consolidation*

[W] For example, the following three button declarations have `varying` amounts and types of white space between the words Click and Me.

----
<Button xml:space="preserve">눌러       주세   요</Button>
----

[[_4_14_79_]]
=== Special Characters

[T] *character entities*::
These special strings are called [underline]#character entities#. All the _character entities_ start with the ampersand character(<button>&</button>) and end with a semicolon.

Since the ampersand marks the start of a character entity, the ampersand character itself needs a character entity, in case you need to insert an actual ampersand character.

[[_4_15_80_]]
=== Summary

[[_5_0_81_]]
== 5. Layout

[[_5_1_82_]]
=== Layout in WPF

[[_5_2_83_]]
=== Chapter Conventions

[[_5_3_84_]]
=== The Layout Process

[W] As I mentioned, in previous frameworks, you set the size of an element and placed it on the panel, `and that was it`. It didn't move, and it didn't change size. Although that simplicity was nice, it also meant that the elements couldn't `adapt` as windows and panels changed sizes.

[[_5_4_85_]]
=== Setting the Requested Size of Elements

[W] Width and Height: Even though the philosophy of WPF is to not set actual sizes for things, `there are times when` you need to `do just that`. You can assign values to these properties to set an actual width or height.

[[_5_5_86_]]
=== Alignment

[[_5_6_87_]]
=== Content Alignment

[W] But you can also place the content `on one end or the other`, using the HorizontalContentAlignment or VerticalContentAlignment property.

[[_5_7_88_]]
=== Visibility

[W] `Visibly`, anyway, it appears not to exist.

[[_5_8_89_]]
=== Padding and Margins

[[_5_9_90_]]
=== Panels

[[_5_10_91_]]
=== The StackPanel

[W] The stack can grow `without bounds`, even it grows beyond the visible edge of the StackPanel.

[[_5_11_92_]]
=== The WrapPanel

[[_5_12_93_]]
=== The DockPanel

[[_5_13_94_]]
=== The Grid

[[_5_13_95_]]
==== Items Spanning Cells

[[_5_13_96_]]
==== Sizing Rows and Columns

[[_5_13_97_]]
==== Absolute Sizing

[[_5_13_98_]]
==== Automatic Sizing

[[_5_13_99_]]
==== Proportional Sizing

[[_5_13_100_]]
==== Splitter Bars

[[_5_13_101_]]
==== Shared Size Groups

[[_5_14_102_]]
=== The Canvas

[[_5_14_103_]]
==== Z-Order on a Canvas

[[_5_15_104_]]
=== The UniformGrid

[[_5_16_105_]]
=== Summary

[[_6_0_106_]]
== 6. Content and Controls

[[_6_1_107_]]
=== Liberating Content

[W] They `factored out` the hard-coded restrictions so that you can include whatever kind of content might make sense in your application.

[W] unprecedented (ŭn-prĕs′ĭ-dĕn′tĭd)::
1. =unparalleled, unheard-of, exceptional, new, original, novel, unusual, abnormal, singular, ground-breaking, unrivalled, freakish, unexampled *Such a move is unprecedented.*
2. =extraordinary, amazing, remarkable, outstanding, fantastic, marvellous, exceptional, phenomenal, uncommon _The scheme has been hailed as an unprecedented success._

+
Not the same as what was previously known or done:
* =different, fresh, innovative, inventive, new, newfangled, novel, original, unfamiliar.

The controls derived from these classes give you `unprecedented` freedom of design.

[T] control::
Also, as a point of terminology, in WPF the term *control* has a more restricted meaning than in previous frameworks. In WPF, [underline]*a control is a user interafce element* with which the user can interact. Previously, any UI element on the screen was called a control.

[[_6_2_108_]]
=== Source Code Conventions

[[_6_3_109_]]
=== The Image Element

[[_6_3_110_]]
==== Displaying an Image Using Code

[[_6_4_111_]]
=== The ContentControls

[[_6_4_112_]]
==== The Label Control

[[_6_4_113_]]
==== The Button Control

[[_6_4_114_]]
==== The CheckBox and RadioButton Controls

[[_6_4_115_]]
==== Grouping RadioButtons

[[_6_4_116_]]
==== The Window Class

[[_6_4_117_]]
==== Window Ownership

[[_6_4_118_]]
==== Modal Dialog Boxes

[[_6_4_119_]]
==== The MessageBox Dialog Box

[[_6_4_120_]]
==== The ScrollViewer

[[_6_5_121_]]
=== The HeaderedContentControls

[[_6_5_122_]]
==== The GroupBox Element

[[_6_5_123_]]
==== The Expander Control

[W] chevron (shĕv′rən)::
1. A badge or insignia consisting of stripes meeting at an angle, worn on the sleeve of a military or police uniform to indicate rank, merit, or length of service.
1. Heraldry A device shaped like an inverted V.
1. A V-shaped pattern, especially a kind of fret used in architecture.

Next to the Header, it also contains a circular button with a `chevron` pointing either up or down to indicate whether the content box should be dropped down (opened) or pulled up (closed).

[[_6_6_124_]]
=== ItemsControl Elements

[[_6_6_125_]]
==== The ListBox Control

[[_6_6_126_]]
==== Checking the Selection

[[_6_6_127_]]
==== Notification of Changed Selection

[[_6_6_128_]]
==== Multiple Selections

[[_6_6_129_]]
==== The ComboBox Control

[[_6_6_130_]]
==== Selecting and Entering Items

[[_6_7_131_]]
=== Summary

[[_7_0_132_]]
== 7. Dependency Properties

[[_7_1_133_]]
=== Properties and a New Paradigm

[W] Although this is the general paradigm, the get and set accessors aren't constrained to setting and returning the backing field; `there doesn't even have to` be a backing field.

[[_7_2_134_]]
=== Looking at an Example

[W] `The short explanation` is that because the property is set at the GroupBox level, everything inside the GroupBox with a FontWeight property inherits the Bold value, except the element that explicitly sets its own value locally.

[[_7_3_135_]]
=== Determining the Value of a Property

[[_7_4_136_]]
=== The Infrastructure of a Dependency Property

[[_7_5_137_]]
=== Creating a Custom Dependency Property

[[_7_6_138_]]
=== Example: Creating a Dependency Property

[[_7_7_139_]]
=== Attached Properties

[[_7_8_140_]]
=== The Structure of an Attached Property

[[_7_9_141_]]
=== Creating an Attached Property

[[_7_10_142_]]
=== Summary

[[_8_0_143_]]
== 8. Data Binding

[[_8_1_144_]]
=== What Is Data Binding?

[[_8_2_145_]]
=== The Binding Object

[W] [such that](http://english.stackexchange.com/questions/16883/difference-between-so-that-and-such-that)

----
The sentences, while very similar, do have a subtle difference of meaning.
"Such that" is a description of HOW something is to be done:

The image will be sheared such that the x-axis goes through (1,1).
-> The image will be sheared in such a way that the x-axis goes through (1,1).
"So that" is a description of WHY something is to be done:

The image will be sheared so that the x-axis goes through (1,1)
-> The image will be sheared in order for the x-axis to go through (1,1).
(Or, more obviously: Because the x-axis needs to pass through (1,1), the image will be sheared appropriately.)
----

----
Right. It seems that with "such that", the outcome could just be a coincidence rather than intentional.
The cup was tipped such that liquid might spill. The cup was tipped so that one could drink from it.
----

----
This distinction criterion is very simple and always works:
'such that' expresses consequence,
'so that' purpose.
----

Creating a binding XAML is so easy that it `obscures` the details of what's actually happening.

The Label is bound to the TextBox `such that` whenever you change the content of the TextBox, the content of the Label is updated to match.

[[_8_3_146_]]
=== Binding Direction

[[_8_4_147_]]
=== Triggers

[[_8_5_148_]]
=== Data Converters

[W] `Sometimes, however, the result isn't exactly what we would hope for.`

[W] sparse (spärs)::
sparse - not dense; "a thin beard"; "trees were sparse"
* =thin
* <>distributed - spread out or scattered about or divided up

In the first window, the value 2 in the TextBox looks a bit `sparse`, but when you drag the slider a bit to the right, the 14 decimal places seems a bit much.

[[_8_6_149_]]
=== Multiple Bindings on an Element

[[_8_7_150_]]
=== More Fun with Multiple Bindings

[[_8_8_151_]]
=== Deleting Bindings

[[_8_9_152_]]
=== Binding to Nonelements

[[_8_10_153_]]
=== Data Contexts

[[_8_11_154_]]
=== Bindings and ItemsControls

[[_8_12_155_]]
=== Summary

[[_9_0_156_]]
== 9. Routing Events and Commands

[[_9_1_157_]]
=== What Is an Event?

[[_9_2_158_]]
=== Event Handlers: Syntax and Semantics

[[_9_2_159_]]
==== Attaching a Handler to an Event

[[_9_3_160_]]
=== What Are Routed Events?

[[_9_3_161_]]
==== Handling Routed Events

[[_9_3_162_]]
==== Bubbling Example

[[_9_3_163_]]
==== Checking for Tunneling

[[_9_4_164_]]
=== Commands

[[_9_5_165_]]
=== Built-in Commands and Support

[W] The predefined commands provide a huge amount of functionality, which you can easily #plug into# your own programs.

Remember, however, that commands themselves don't include the handler code to acually perform anything on the target. They do, however, include the common input gestures such as the keyboard shortcut kbd:[Ctrl+X] for the cut-to-clipboard command.

[[_9_6_166_]]
=== The RoutedCommand Class

[[_9_7_167_]]
=== Creating Custom Commands

[[_9_7_168_]]
==== Routing Commands

[[_9_8_169_]]
=== Summary

[[_10_0_170_]]
== 10. Other Controls and Elements

[[_10_1_171_]]
=== The TextBox Control

[[_10_2_172_]]
=== Menus

[[_10_2_173_]]
==== Adorning the MenuItem

[[_10_2_174_]]
==== Other Content As the Menu Header

[[_10_2_175_]]
==== Attaching Commands to Menu Items

[[_10_3_176_]]
=== Context Menus

[[_10_4_177_]]
=== ToolBars

[[_10_5_178_]]
=== StatusBars

[[_10_6_179_]]
=== ToolTips

[[_10_7_180_]]
=== Controls That Work with Ranges

[[_10_7_181_]]
==== The ProgressBar

[[_10_7_182_]]
==== The Slider

[[_10_8_183_]]
=== Summary

[[_11_0_184_]]
== 11. Resources

[[_11_1_185_]]
=== Two Types of Resources

[[_11_2_186_]]
=== The ResourceDictionary

[[_11_2_187_]]
==== StaticResources and DynamicResources

[[_11_3_188_]]
=== Assembly Resources

[[_11_4_189_]]
=== Accessing Assembly Resources from the Code

[[_11_4_190_]]
==== Pack URIs

[[_11_5_191_]]
=== Summary

[[_12_0_192_]]
== 12. Styles

[[_12_1_193_]]
=== What Are Styles?

[[_12_2_194_]]
=== Named Styles

[[_12_3_195_]]
=== Targeted Styles

[[_12_4_196_]]
=== Comparing Named and Targeted Styles

[[_12_5_197_]]
=== EventSetters

[[_12_6_198_]]
=== The Collections in a Style

[[_12_7_199_]]
=== Property Triggers

[[_12_8_200_]]
=== MultiTriggers

[[_12_9_201_]]
=== Other Types of Triggers

[[_12_10_202_]]
=== Summary

[[_13_0_203_]]
== 13. Control Templates

[[_13_1_204_]]
=== Separating Appearance from Behavior

[[_13_2_205_]]
=== Developing a Simple Control Template

[[_13_3_206_]]
=== The ContentPresenter Class

[[_13_4_207_]]
=== Template Binding

[[_13_5_208_]]
=== ControlTemplate Triggers

[[_13_6_209_]]
=== Summary

[[_14_0_210_]]
== 14. Page Navigation Programs

[[_14_1_211_]]
=== Types of Navigation

[[_14_1_212_]]
==== The Components of a Navigation Program

[[_14_1_213_]]
==== Frames

[[_14_1_214_]]
==== Journal Options in Frames

[[_14_2_215_]]
=== Navigating Programmatically

[[_14_2_216_]]
==== Passing Data to a Page

[[_14_2_217_]]
==== Getting Data Back from a Page

[[_14_3_218_]]
=== XAML Browser Applications

[[_14_3_219_]]
==== Creating an XBAP Application

[[_14_3_220_]]
==== Deploying and Running

[[_14_4_221_]]
=== Summary

[[_15_0_222_]]
== 15. More Data Binding

[[_15_1_223_]]
=== Data Templates

[[_15_2_224_]]
=== Views

[[_15_3_225_]]
=== Filtering in a View

[[_15_4_226_]]
=== Sorting in a View

[[_15_5_227_]]
=== Grouping in a View

[[_15_6_228_]]
=== Summary

[[_16_0_229_]]
== 16. Trees, Tabs, and Other Controls

[[_16_1_230_]]
=== The TreeView Control

[W] Although this makes perfect sense, it's just not the way it's done in this case

[[_16_2_231_]]
=== The HierarchicalDataTemplate

[[_16_3_232_]]
=== Using Event Handlers with TreeViews

[[_16_4_233_]]
=== Binding Other Controls to a TreeView

[[_16_5_234_]]
=== The TabControl

[[_16_6_235_]]
=== The Calendar Control

[[_16_7_236_]]
=== The DatePicker Control

[[_16_8_237_]]
=== The DataGrid Control

[[_16_9_238_]]
=== Summary

[[_17_0_239_]]
== 17. Text and Documents

[[_17_1_240_]]
=== Text in WPF

[[_17_2_241_]]
=== An Overview of Flow Documents

[[_17_3_242_]]
=== The Components of a Flow Document

[[_17_3_243_]]
==== The Hosting Controls

[[_17_4_244_]]
=== The Content of a Flow Document

[[_17_4_245_]]
==== Tables and Lists

[[_17_5_246_]]
=== Embedded Flow Documents

[[_17_6_247_]]
=== The TextBlock Element

[[_17_7_248_]]
=== Summary

[[_18_0_249_]]
== 18. Graphics in WPF

[[_18_1_250_]]
=== Graphics in WPF

[[_18_2_251_]]
=== Transforms

[[_18_2_252_]]
==== The RotateTransform

[[_18_2_253_]]
==== Using LayoutTransform vs. RenderTransform

[[_18_2_254_]]
==== The TranslateTransform

[[_18_2_255_]]
==== The SkewTransform

[[_18_2_256_]]
==== The ScaleTransform

[[_18_2_257_]]
==== BitmapEffects

[[_18_3_258_]]
=== Brushes

[[_18_3_259_]]
==== LinearGradientBrushes

[[_18_4_260_]]
=== Shapes

[[_18_5_261_]]
=== The Geometry Classes

[[_18_5_262_]]
==== The Simple Geometry Classes

[[_18_5_263_]]
==== The PathGeometry Class

[[_18_5_264_]]
==== The LineSegment and the PolyLineSegment

[[_18_5_265_]]
==== The ArcSegment

[[_18_5_266_]]
==== Combining Geometries

[[_18_5_267_]]
==== Path Markup Syntax

[[_18_5_268_]]
==== Filling Geometries

[[_18_6_269_]]
=== Drawings

[[_18_6_270_]]
==== The DrawingImage Class

[[_18_6_271_]]
==== The DrawingBrush Class

[[_18_7_272_]]
=== Summary

[[_19_0_273_]]
== 19. Animation

[[_19_1_274_]]
=== What Is Animation?

[[_19_2_275_]]
=== Animation Object Basics

[[_19_3_276_]]
=== The AnimationClock Class

[[_19_4_277_]]
=== Storyboards

[[_19_4_278_]]
==== Storyboards in Markup

[[_19_5_279_]]
=== Other Variations on Animation

[[_19_6_280_]]
=== Keyframe Animations

[[_19_6_281_]]
==== Linear Keyframe Animation

[[_19_6_282_]]
==== Spline Interpolation Animations

[[_19_6_283_]]
==== Discrete Keyframe Animation

[[_19_7_284_]]
=== Path Animations

[[_19_8_285_]]
=== Summary

[[_20_0_286_]]
== 20. Audio and Video

[[_20_1_287_]]
=== Overview of Audio

[[_20_1_288_]]
==== SystemSounds

[[_20_2_289_]]
=== SoundPlayer

[[_20_2_290_]]
==== SoundPlayerAction

[[_20_3_291_]]
=== MediaPlayer

[[_20_4_292_]]
=== MediaElement

[[_20_5_293_]]
=== Video

[[_20_6_294_]]
=== Summary


undefined
