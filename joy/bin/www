#!/usr/bin/env node

/**
 * NPM Result Message after 'express joytest'
 * -----------------------
   install dependencies:
     $ cd joytest && npm install

   run the app:
     $ DEBUG=joytest:* ./bin/www
 */

/**
 * Module dependencies.
 */

var
  app = require('../app')
  , appHttp = require('../apphttp')
  , debug = require('debug')('joytest:server')
  , http = require('http')
  , https = require('https')
  , fs = require('fs')
  , path = require('path')
  , certPath
  , httpsOptions
  , io
  , port
  , portHttp
  , server
  , serverHttp
  , joysql = require('../joymodules/joysql')
  , joysocket = require('../joymodules/joysocket')
  , fxcalc = require('../joymodules/fxcalc')
;

/**
 * ENV
 */
switch (require("os").hostname()) {
  case "dagem": //-- development
    process.env.NODE_ENV = 'development';
    break;
  case "BIPA-PC": //-- development
    process.env.NODE_ENV = 'development';
    break;
  default: // -- otherwise
    process.env.NODE_ENV = 'production';
}

/**
 * Create servers
 */

//-- HTTP

portHttp = normalizePort(process.env.PORT || '80');
appHttp.set('port', portHttp);
serverHttp = http.createServer(appHttp);

//-- HTTPS

certPath = "cert";
httpsOptions = {
    key: fs.readFileSync(path.join(certPath, "joy-key.pem")),
    cert: fs.readFileSync(path.join(certPath, "joy-cert.pem"))
};

port = normalizePort(process.env.PORTHTTPS || '443');
app.set('port', port);
server = https.createServer(httpsOptions, app);

/**
 * SOCKET.IO
 */

io = joysocket.listen(server);

/**
 * FX
 */

var fx = setInterval(function() {
  var fxcount = 0;
  fxcalc.FxRetrieval();
  if (fxcount++ == 100) clearInterval(fx);
}, 1000*60);

/**
 * Start Servers
 */

serverHttp.listen(appHttp.get('port'), function() {
  console.log('HTTP server listening on port ' + appHttp.get('port'));
});
serverHttp.on('error', onError);
serverHttp.on('listening', onListening);

server.listen(app.get('port'), function() {
  console.log('HTTPS server listening on port %d', server.address().port);
});
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
